{"ast":null,"code":"const API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\nexport function getWeather(type, searchParams) {\n  const url = new URL(`${URL_API}/${type}`);\n  const params = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  url.search = params.toString();\n  return fetch(url).then(res => res.json());\n}\nfunction formatCurrentWeather(data) {\n  console.log('data ', data);\n  let {\n    lat,\n    lon,\n    current: {\n      temp,\n      dt,\n      feels_like,\n      weather\n    },\n    daily,\n    // main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    // sys: { country, sunrise, sunset },\n    // wind: { speed },\n    timezone,\n    timezone_offset\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: getTime(timeToLocal(d.dt, timezone_offset)),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  console.log('daily', weather[0]);\n  const {\n    main: details,\n    icon,\n    description\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    city: timezone.split('/')[1],\n    dt,\n    // country,\n    // sunrise,\n    // sunset,\n    details,\n    icon,\n    description,\n    date: getTime(timeToLocal(dt, timezone_offset))\n  };\n}\nexport async function getFormattedDataWeather(searchParams) {\n  const formattedCurrentWeather = await getWeather(\"onecall\", searchParams).then(formatCurrentWeather);\n  // getForecastWeather(searchParams)\n\n  console.log('formatted', formattedCurrentWeather);\n  return {\n    formattedCurrentWeather\n  };\n}\nexport async function getForecastWeather(searchParams) {\n  const dataForecast = await getWeather(\"onecall\", searchParams);\n\n  // console.log('data forecast', dataForecast)\n}\n\nexport function timeToLocal(sec, timezone) {\n  return new Date(sec * 1000 + timezone * 1000).toUTCString();\n}\nfunction getTime(date) {\n  const localeDate = new Date(date);\n  const day = localeDate.toLocaleDateString(\"en-GB\", {\n    weekday: 'long'\n  });\n  return {\n    day,\n    date: localeDate.toLocaleDateString(\"en-GB\")\n  };\n}","map":{"version":3,"names":["API_KEY","URL_API","getWeather","type","searchParams","url","URL","params","URLSearchParams","appid","search","toString","fetch","then","res","json","formatCurrentWeather","data","console","log","lat","lon","current","temp","dt","feels_like","weather","daily","name","timezone","timezone_offset","slice","map","d","title","getTime","timeToLocal","day","icon","main","details","description","city","split","date","getFormattedDataWeather","formattedCurrentWeather","getForecastWeather","dataForecast","sec","Date","toUTCString","localeDate","toLocaleDateString","weekday"],"sources":["/Users/darakorbut/Downloads/projects/weatherapp/src/weather.js"],"sourcesContent":["const API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\n\nexport function getWeather(type, searchParams) {\n    const url = new URL(`${URL_API}/${type}`);\n    const params = new URLSearchParams({ ...searchParams, appid: API_KEY });\n    url.search = params.toString();\n\n    return fetch(url).then((res) => res.json());\n}\n\nfunction formatCurrentWeather(data) {\n\n    console.log('data ', data)\n    let {\n        lat,\n        lon,\n        current: {temp, dt, feels_like, weather},\n        daily,\n        // main: { temp, feels_like, temp_min, temp_max, humidity },\n        name,\n        // sys: { country, sunrise, sunset },\n        // wind: { speed },\n        timezone,\n        timezone_offset\n    } = data;\n\n    daily = daily.slice(1, 6).map((d) => {\n        return {\n            title: getTime(timeToLocal(d.dt, timezone_offset)),\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    console.log('daily', weather[0])\n    const { main: details, icon, description } = weather[0];\n\n    return {\n        lat,\n        lon,\n        temp,\n        feels_like,\n        city: timezone.split('/')[1],\n        dt,\n        // country,\n        // sunrise,\n        // sunset,\n        details,\n        icon,\n        description,\n        date: getTime(timeToLocal(dt, timezone_offset))\n    };\n}\nexport async function getFormattedDataWeather(searchParams) {\n    const formattedCurrentWeather = await getWeather(\n        \"onecall\",\n        searchParams\n    ).then(formatCurrentWeather);\n    // getForecastWeather(searchParams)\n\n    console.log('formatted', formattedCurrentWeather)\n\n    return ({\n        formattedCurrentWeather\n    })\n}\n\nexport async function getForecastWeather(searchParams) {\n    const dataForecast = await getWeather(\"onecall\", searchParams);\n\n    // console.log('data forecast', dataForecast)\n}\n\nexport function timeToLocal(sec, timezone) {\n    return (new Date(sec*1000+(timezone*1000)).toUTCString())\n}\n\nfunction getTime(date) {\n    const localeDate = new Date(date);\n    const  day = localeDate.toLocaleDateString(\"en-GB\", {\n        weekday: 'long'\n    })\n\n    return ({\n        day,\n        date: localeDate.toLocaleDateString(\"en-GB\")\n    })\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}