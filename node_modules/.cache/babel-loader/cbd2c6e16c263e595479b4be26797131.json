{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\nexport async function getWeather(type, searchParams) {\n  const url = new URL(`${URL_API}/${type}`);\n  const params = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  url.search = params.toString();\n  try {\n    let res = await fetch(url);\n    console.log('выполняется', res.status);\n    return await res.json();\n  } catch (err) {\n    throw new Error(err);\n  }\n}\nfunction formatForecastWeather(data) {\n  let {\n    lat,\n    lon,\n    current: {\n      temp,\n      dt,\n      weather\n    },\n    daily,\n    hourly,\n    timezone\n  } = data;\n  daily = daily.slice(1, 7).map(d => {\n    return {\n      date: formattedTime(d.dt, timezone),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(0, 24).map(h => {\n    return {\n      date: formattedTime(h.dt, timezone),\n      temp: h.temp,\n      icon: h.weather[0].icon\n    };\n  });\n  const {\n    icon,\n    description\n  } = weather[0];\n  return {\n    current: {\n      lat,\n      lon,\n      temp,\n      city: timezone.split('/')[1],\n      dt,\n      icon,\n      description,\n      date: formattedTime(dt, timezone)\n    },\n    daily,\n    hourly\n  };\n}\nfunction formatCurrentWeather(data) {\n  const {\n    coord: {\n      lat,\n      lon\n    }\n  } = data;\n  return {\n    lat,\n    lon\n  };\n}\nexport async function getDataCurrentWeather(searchParams) {\n  try {\n    let data = await getWeather('weather', searchParams);\n    const formattedCurrentWeather = formatCurrentWeather(data);\n    const {\n      lat,\n      lon\n    } = formattedCurrentWeather;\n    return await getFormattedDataWeather({\n      lat,\n      lon,\n      units: 'metric'\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n}\nexport async function getFormattedDataWeather(searchParams) {\n  try {\n    let data = await getWeather('onecall', searchParams);\n    return formatForecastWeather(data);\n  } catch (err) {\n    throw new Error(err);\n  }\n}\nconst getLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};\nfunction formattedTime(sec, timezone) {\n  return {\n    dayShort: getLocalTime(sec, timezone, 'EEE'),\n    dayLong: getLocalTime(sec, timezone, 'EEEE'),\n    time: getLocalTime(sec, timezone, 'HH:MM'),\n    date: getLocalTime(sec, timezone, 'dd/MM/yyyy')\n  };\n}\n\n// export function timeToLocal(sec, timezone) {\n//     return (new Date(sec * 1000 + (timezone * 1000)).toUTCString())\n// }\n\n// function getTime(date) {\n//     const localeDate = new Date(date);\n//     const dayLong = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'long'\n//     });\n//     const dayShort = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'short'\n//     });\n//\n//     let time = localeDate.toLocaleTimeString('en-GB');\n//     time = time.split(':').splice(0, 2).join(':');\n//\n//     return ({\n//         dayLong,\n//         dayShort,\n//         time,\n//         date: localeDate.toLocaleDateString(\"en-GB\")\n//     })\n//\n// }","map":{"version":3,"names":["DateTime","API_KEY","URL_API","getWeather","type","searchParams","url","URL","params","URLSearchParams","appid","search","toString","res","fetch","console","log","status","json","err","Error","formatForecastWeather","data","lat","lon","current","temp","dt","weather","daily","hourly","timezone","slice","map","d","date","formattedTime","day","icon","h","description","city","split","formatCurrentWeather","coord","getDataCurrentWeather","formattedCurrentWeather","getFormattedDataWeather","units","getLocalTime","secs","zone","format","fromSeconds","setZone","toFormat","sec","dayShort","dayLong","time"],"sources":["/Users/darakorbut/Downloads/projects/weatherapp/src/weather.js"],"sourcesContent":["import {DateTime} from \"luxon\";\n\nconst API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\n\nexport async function getWeather(type, searchParams) {\n    const url = new URL(`${URL_API}/${type}`);\n    const params = new URLSearchParams({...searchParams, appid: API_KEY});\n    url.search = params.toString();\n\n    try {\n        let res = await fetch(url);\n        console.log('выполняется', res.status)\n        return await res.json();\n\n    } catch (err) {\n         throw new Error(err);\n    }\n}\n\nfunction formatForecastWeather(data) {\n    let {\n        lat,\n        lon,\n        current: {temp, dt, weather},\n        daily,\n        hourly,\n        timezone,\n    } = data;\n\n    daily = daily.slice(1, 7).map((d) => {\n        return {\n            date: formattedTime(d.dt, timezone),\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    hourly = hourly.slice(0, 24).map((h) => {\n        return {\n            date: formattedTime(h.dt, timezone),\n            temp: h.temp,\n            icon: h.weather[0].icon,\n        };\n    });\n\n    const {icon, description} = weather[0];\n\n    return ({\n        current: {\n            lat,\n            lon,\n            temp,\n            city: timezone.split('/')[1],\n            dt,\n            icon,\n            description,\n            date: formattedTime(dt, timezone),\n        },\n        daily,\n        hourly\n\n    });\n}\n\nfunction formatCurrentWeather(data) {\n    const {\n        coord: {lat, lon}\n    } = data;\n\n    return {\n        lat,\n        lon,\n    };\n}\n\nexport async function getDataCurrentWeather(searchParams) {\n    try {\n        let data = await getWeather('weather', searchParams);\n        const formattedCurrentWeather = formatCurrentWeather(data);\n        const {lat, lon} = formattedCurrentWeather;\n\n        return await getFormattedDataWeather({lat, lon, units: 'metric'});\n    } catch (err) {\n        throw new Error(err);\n    }\n}\n\nexport async function getFormattedDataWeather(searchParams) {\n    try {\n        let data = await getWeather('onecall', searchParams);\n\n        return formatForecastWeather(data);\n    } catch (err) {\n        throw new Error(err);\n    }\n}\n\nconst getLocalTime = (\n    secs,\n    zone,\n    format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nfunction formattedTime(sec, timezone) {\n    return {\n        dayShort: getLocalTime(sec, timezone, 'EEE'),\n        dayLong: getLocalTime(sec, timezone, 'EEEE'),\n        time: getLocalTime(sec, timezone, 'HH:MM'),\n        date: getLocalTime(sec, timezone, 'dd/MM/yyyy')\n    }\n}\n\n// export function timeToLocal(sec, timezone) {\n//     return (new Date(sec * 1000 + (timezone * 1000)).toUTCString())\n// }\n\n// function getTime(date) {\n//     const localeDate = new Date(date);\n//     const dayLong = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'long'\n//     });\n//     const dayShort = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'short'\n//     });\n//\n//     let time = localeDate.toLocaleTimeString('en-GB');\n//     time = time.split(':').splice(0, 2).join(':');\n//\n//     return ({\n//         dayLong,\n//         dayShort,\n//         time,\n//         date: localeDate.toLocaleDateString(\"en-GB\")\n//     })\n//\n// }\n\n"],"mappings":"AAAA,SAAQA,QAAQ,QAAO,OAAO;AAE9B,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,OAAO,GAAG,0CAA0C;AAE1D,OAAO,eAAeC,UAAU,CAACC,IAAI,EAAEC,YAAY,EAAE;EACjD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAE,GAAEL,OAAQ,IAAGE,IAAK,EAAC,CAAC;EACzC,MAAMI,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAC,GAAGJ,YAAY;IAAEK,KAAK,EAAET;EAAO,CAAC,CAAC;EACrEK,GAAG,CAACK,MAAM,GAAGH,MAAM,CAACI,QAAQ,EAAE;EAE9B,IAAI;IACA,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAG,CAAC;IAC1BS,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEH,GAAG,CAACI,MAAM,CAAC;IACtC,OAAO,MAAMJ,GAAG,CAACK,IAAI,EAAE;EAE3B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACT,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACzB;AACJ;AAEA,SAASE,qBAAqB,CAACC,IAAI,EAAE;EACjC,IAAI;IACAC,GAAG;IACHC,GAAG;IACHC,OAAO,EAAE;MAACC,IAAI;MAAEC,EAAE;MAAEC;IAAO,CAAC;IAC5BC,KAAK;IACLC,MAAM;IACNC;EACJ,CAAC,GAAGT,IAAI;EAERO,KAAK,GAAGA,KAAK,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAK;IACjC,OAAO;MACHC,IAAI,EAAEC,aAAa,CAACF,CAAC,CAACP,EAAE,EAAEI,QAAQ,CAAC;MACnCL,IAAI,EAAEQ,CAAC,CAACR,IAAI,CAACW,GAAG;MAChBC,IAAI,EAAEJ,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,CAACU;IACvB,CAAC;EACL,CAAC,CAAC;EAEFR,MAAM,GAAGA,MAAM,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAEM,CAAC,IAAK;IACpC,OAAO;MACHJ,IAAI,EAAEC,aAAa,CAACG,CAAC,CAACZ,EAAE,EAAEI,QAAQ,CAAC;MACnCL,IAAI,EAAEa,CAAC,CAACb,IAAI;MACZY,IAAI,EAAEC,CAAC,CAACX,OAAO,CAAC,CAAC,CAAC,CAACU;IACvB,CAAC;EACL,CAAC,CAAC;EAEF,MAAM;IAACA,IAAI;IAAEE;EAAW,CAAC,GAAGZ,OAAO,CAAC,CAAC,CAAC;EAEtC,OAAQ;IACJH,OAAO,EAAE;MACLF,GAAG;MACHC,GAAG;MACHE,IAAI;MACJe,IAAI,EAAEV,QAAQ,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5Bf,EAAE;MACFW,IAAI;MACJE,WAAW;MACXL,IAAI,EAAEC,aAAa,CAACT,EAAE,EAAEI,QAAQ;IACpC,CAAC;IACDF,KAAK;IACLC;EAEJ,CAAC;AACL;AAEA,SAASa,oBAAoB,CAACrB,IAAI,EAAE;EAChC,MAAM;IACFsB,KAAK,EAAE;MAACrB,GAAG;MAAEC;IAAG;EACpB,CAAC,GAAGF,IAAI;EAER,OAAO;IACHC,GAAG;IACHC;EACJ,CAAC;AACL;AAEA,OAAO,eAAeqB,qBAAqB,CAACxC,YAAY,EAAE;EACtD,IAAI;IACA,IAAIiB,IAAI,GAAG,MAAMnB,UAAU,CAAC,SAAS,EAAEE,YAAY,CAAC;IACpD,MAAMyC,uBAAuB,GAAGH,oBAAoB,CAACrB,IAAI,CAAC;IAC1D,MAAM;MAACC,GAAG;MAAEC;IAAG,CAAC,GAAGsB,uBAAuB;IAE1C,OAAO,MAAMC,uBAAuB,CAAC;MAACxB,GAAG;MAAEC,GAAG;MAAEwB,KAAK,EAAE;IAAQ,CAAC,CAAC;EACrE,CAAC,CAAC,OAAO7B,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ;AAEA,OAAO,eAAe4B,uBAAuB,CAAC1C,YAAY,EAAE;EACxD,IAAI;IACA,IAAIiB,IAAI,GAAG,MAAMnB,UAAU,CAAC,SAAS,EAAEE,YAAY,CAAC;IAEpD,OAAOgB,qBAAqB,CAACC,IAAI,CAAC;EACtC,CAAC,CAAC,OAAOH,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ;AAEA,MAAM8B,YAAY,GAAG,UACjBC,IAAI,EACJC,IAAI;EAAA,IACJC,MAAM,uEAAG,2CAA2C;EAAA,OACnDpD,QAAQ,CAACqD,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAAA;AAE9D,SAAShB,aAAa,CAACoB,GAAG,EAAEzB,QAAQ,EAAE;EAClC,OAAO;IACH0B,QAAQ,EAAER,YAAY,CAACO,GAAG,EAAEzB,QAAQ,EAAE,KAAK,CAAC;IAC5C2B,OAAO,EAAET,YAAY,CAACO,GAAG,EAAEzB,QAAQ,EAAE,MAAM,CAAC;IAC5C4B,IAAI,EAAEV,YAAY,CAACO,GAAG,EAAEzB,QAAQ,EAAE,OAAO,CAAC;IAC1CI,IAAI,EAAEc,YAAY,CAACO,GAAG,EAAEzB,QAAQ,EAAE,YAAY;EAClD,CAAC;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}