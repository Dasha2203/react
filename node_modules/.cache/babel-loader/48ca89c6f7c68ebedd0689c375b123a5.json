{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\nexport function getWeather(type, searchParams) {\n  const url = new URL(`${URL_API}/${type}`);\n  const params = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  url.search = params.toString();\n  return fetch(url).then(res => res.json());\n}\nfunction formatForecastWeather(data) {\n  let {\n    lat,\n    lon,\n    current: {\n      temp,\n      dt,\n      weather\n    },\n    daily,\n    hourly,\n    timezone,\n    timezone_offset\n  } = data;\n  daily = daily.slice(1, 7).map(d => {\n    return {\n      date: {\n        dayShort: formatToLocalTime(d.dt, timezone, 'EEE'),\n        dayLong: formatToLocalTime(d.dt, timezone, 'EEEE'),\n        time: formatToLocalTime(d.dt, timezone, 'HH:MM'),\n        date: formatToLocalTime(d.dt, timezone, 'dd/MM/yyyy')\n      },\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(0, 47).map(h => {\n    console.log('Dasha hourly time: ', formatToLocalTime(dt, timezone, 'EEE'));\n    return {\n      date: {\n        dayShort: formatToLocalTime(h.dt, timezone, 'EEE'),\n        dayLong: formatToLocalTime(h.dt, timezone, 'EEEE'),\n        time: formatToLocalTime(h.dt, timezone, 'HH:MM'),\n        date: formatToLocalTime(h.dt, timezone, 'dd/MM/yyyy')\n      },\n      temp: h.temp,\n      icon: h.weather[0].icon\n    };\n  });\n  const {\n    icon,\n    description\n  } = weather[0];\n  console.log('Dasha time: ', formatToLocalTime(dt, timezone, 'EEE'));\n  return {\n    current: {\n      lat,\n      lon,\n      temp,\n      city: timezone.split('/')[1],\n      dt,\n      icon,\n      description,\n      date: {\n        dayShort: formatToLocalTime(dt, timezone, 'EEE'),\n        dayLong: formatToLocalTime(dt, timezone, 'EEEE'),\n        time: formatToLocalTime(dt, timezone, 'HH:MM'),\n        date: formatToLocalTime(dt, timezone, 'dd/MM/yyyy')\n      }\n    },\n    daily,\n    hourly: hourly.slice(0, 23)\n  };\n}\nfunction formatCurrentWeather(data) {\n  const {\n    coord: {\n      lat,\n      lon\n    }\n  } = data;\n  return {\n    lat,\n    lon\n  };\n}\nexport async function getDataCurrentWeather(searchParams) {\n  const formattedCurrentWeather = await getWeather('weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  return await getFormattedDataWeather({\n    lat,\n    lon,\n    units: 'metric'\n  });\n}\nexport async function getFormattedDataWeather(searchParams) {\n  return await getWeather('onecall', searchParams).then(formatForecastWeather);\n}\n\n// export function timeToLocal(sec, timezone) {\n//     return (new Date(sec * 1000 + (timezone * 1000)).toUTCString())\n// }\n\n// function getTime(date) {\n//     const localeDate = new Date(date);\n//     const dayLong = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'long'\n//     });\n//     const dayShort = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'short'\n//     });\n//\n//     let time = localeDate.toLocaleTimeString('en-GB');\n//     time = time.split(':').splice(0, 2).join(':');\n//\n//     return ({\n//         dayLong,\n//         dayShort,\n//         time,\n//         date: localeDate.toLocaleDateString(\"en-GB\")\n//     })\n//\n// }\n\nconst formatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};","map":{"version":3,"names":["DateTime","API_KEY","URL_API","getWeather","type","searchParams","url","URL","params","URLSearchParams","appid","search","toString","fetch","then","res","json","formatForecastWeather","data","lat","lon","current","temp","dt","weather","daily","hourly","timezone","timezone_offset","slice","map","d","date","dayShort","formatToLocalTime","dayLong","time","day","icon","h","console","log","description","city","split","formatCurrentWeather","coord","getDataCurrentWeather","formattedCurrentWeather","getFormattedDataWeather","units","secs","zone","format","fromSeconds","setZone","toFormat"],"sources":["/Users/darakorbut/Downloads/projects/weatherapp/src/weather.js"],"sourcesContent":["import {DateTime} from \"luxon\";\n\nconst API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\n\nexport function getWeather(type, searchParams) {\n    const url = new URL(`${URL_API}/${type}`);\n    const params = new URLSearchParams({...searchParams, appid: API_KEY});\n    url.search = params.toString();\n\n    return fetch(url).then((res) => res.json());\n}\n\nfunction formatForecastWeather(data) {\n    let {\n        lat,\n        lon,\n        current: {temp, dt, weather},\n        daily,\n        hourly,\n        timezone,\n        timezone_offset\n    } = data;\n\n    daily = daily.slice(1, 7).map((d) => {\n        return {\n            date: {\n                dayShort: formatToLocalTime(d.dt, timezone, 'EEE'),\n                dayLong: formatToLocalTime(d.dt, timezone, 'EEEE'),\n                time: formatToLocalTime(d.dt, timezone, 'HH:MM'),\n                date: formatToLocalTime(d.dt, timezone, 'dd/MM/yyyy')\n            },\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    hourly = hourly.slice(0, 47).map((h) => {\n        console.log('Dasha hourly time: ',formatToLocalTime(dt, timezone, 'EEE'));\n\n        return {\n            date: {\n                dayShort: formatToLocalTime(h.dt, timezone, 'EEE'),\n                dayLong: formatToLocalTime(h.dt, timezone, 'EEEE'),\n                time: formatToLocalTime(h.dt, timezone, 'HH:MM'),\n                date: formatToLocalTime(h.dt, timezone, 'dd/MM/yyyy')\n            },\n            temp: h.temp,\n            icon: h.weather[0].icon,\n        };\n    });\n\n    const {icon, description} = weather[0];\n\n    console.log('Dasha time: ',formatToLocalTime(dt, timezone, 'EEE'));\n\n    return ({\n        current: {\n            lat,\n            lon,\n            temp,\n            city: timezone.split('/')[1],\n            dt,\n            icon,\n            description,\n            date: {\n                dayShort: formatToLocalTime(dt, timezone, 'EEE'),\n                dayLong: formatToLocalTime(dt, timezone, 'EEEE'),\n                time: formatToLocalTime(dt, timezone, 'HH:MM'),\n                date: formatToLocalTime(dt, timezone, 'dd/MM/yyyy')\n            }\n        },\n        daily,\n        hourly: hourly.slice(0,23)\n\n    });\n}\n\nfunction formatCurrentWeather(data) {\n    const {\n        coord: {lat, lon}\n    } = data;\n\n    return {\n        lat,\n        lon,\n    };\n}\n\nexport async function getDataCurrentWeather(searchParams) {\n    const formattedCurrentWeather = await getWeather(\n        'weather',\n        searchParams\n    ).then(formatCurrentWeather);\n\n    const {lat, lon} = formattedCurrentWeather;\n\n    return await getFormattedDataWeather({lat, lon, units: 'metric'});\n}\n\nexport async function getFormattedDataWeather(searchParams) {\n\n    return await getWeather(\n        'onecall',\n        searchParams\n    ).then(formatForecastWeather);\n}\n\n// export function timeToLocal(sec, timezone) {\n//     return (new Date(sec * 1000 + (timezone * 1000)).toUTCString())\n// }\n\n// function getTime(date) {\n//     const localeDate = new Date(date);\n//     const dayLong = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'long'\n//     });\n//     const dayShort = localeDate.toLocaleDateString(\"en-GB\", {\n//         weekday: 'short'\n//     });\n//\n//     let time = localeDate.toLocaleTimeString('en-GB');\n//     time = time.split(':').splice(0, 2).join(':');\n//\n//     return ({\n//         dayLong,\n//         dayShort,\n//         time,\n//         date: localeDate.toLocaleDateString(\"en-GB\")\n//     })\n//\n// }\n\nconst formatToLocalTime = (\n    secs,\n    zone,\n    format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}