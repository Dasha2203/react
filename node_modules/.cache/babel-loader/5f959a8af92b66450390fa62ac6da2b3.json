{"ast":null,"code":"const API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\nexport function getWeather(type, searchParams) {\n  const url = new URL(`${URL_API}/${type}`);\n  const params = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  url.search = params.toString();\n  return fetch(url).then(res => res.json());\n}\nfunction formatForecastWeather(data) {\n  let {\n    lat,\n    lon,\n    current: {\n      temp,\n      dt,\n      weather\n    },\n    daily,\n    hourly,\n    timezone,\n    timezone_offset\n  } = data;\n  daily = daily.slice(1, 7).map(d => {\n    return {\n      date: getTime(timeToLocal(d.dt, timezone_offset)),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(0, 47).map(h => {\n    return {\n      date: getTime(timeToLocal(h.dt, timezone_offset)),\n      temp: h.temp,\n      icon: h.weather[0].icon\n    };\n  });\n  const {\n    icon,\n    description\n  } = weather[0];\n  return {\n    current: {\n      lat,\n      lon,\n      temp,\n      city: timezone.split('/')[1],\n      dt,\n      icon,\n      description,\n      date: getTime(timeToLocal(dt, timezone_offset))\n    },\n    daily,\n    hourly\n  };\n}\nfunction formatCurrentWeather(data) {\n  const {\n    coord: {\n      lat,\n      lon\n    }\n  } = data;\n  return {\n    lat,\n    lon\n  };\n}\nexport async function getDataCurrentWeather(searchParams) {\n  const formattedCurrentWeather = await getWeather('weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  let forecastWeather = getFormattedDataWeather({\n    lat,\n    lon,\n    units: 'metric'\n  });\n  return forecastWeather;\n}\nexport async function getFormattedDataWeather(searchParams) {\n  const formattedForecastWeather = await getWeather('onecall', searchParams).then(formatForecastWeather);\n  return formattedForecastWeather;\n}\nexport function timeToLocal(sec, timezone) {\n  return new Date(sec * 1000 + timezone * 1000).toUTCString();\n}\nfunction getTime(date) {\n  const localeDate = new Date(date);\n  const dayLong = localeDate.toLocaleDateString(\"en-GB\", {\n    weekday: 'long'\n  });\n  const dayShort = localeDate.toLocaleDateString(\"en-GB\", {\n    weekday: 'short'\n  });\n  let time = localeDate.toLocaleTimeString('en-GB');\n  time = time.split(':').splice(0, 2).join(':');\n  return {\n    dayLong,\n    dayShort,\n    time,\n    date: localeDate.toLocaleDateString(\"en-GB\")\n  };\n}","map":{"version":3,"names":["API_KEY","URL_API","getWeather","type","searchParams","url","URL","params","URLSearchParams","appid","search","toString","fetch","then","res","json","formatForecastWeather","data","lat","lon","current","temp","dt","weather","daily","hourly","timezone","timezone_offset","slice","map","d","date","getTime","timeToLocal","day","icon","h","description","city","split","formatCurrentWeather","coord","getDataCurrentWeather","formattedCurrentWeather","forecastWeather","getFormattedDataWeather","units","formattedForecastWeather","sec","Date","toUTCString","localeDate","dayLong","toLocaleDateString","weekday","dayShort","time","toLocaleTimeString","splice","join"],"sources":["/Users/darakorbut/Downloads/projects/weatherapp/src/weather.js"],"sourcesContent":["const API_KEY = 'c065f555d4e19864fdc27e420f758663';\nconst URL_API = 'https://api.openweathermap.org/data/2.5/';\n\nexport function getWeather(type, searchParams) {\n    const url = new URL(`${URL_API}/${type}`);\n    const params = new URLSearchParams({ ...searchParams, appid: API_KEY });\n    url.search = params.toString();\n\n    return fetch(url).then((res) => res.json());\n}\n\nfunction formatForecastWeather(data) {\n    let {\n        lat,\n        lon,\n        current: {temp, dt, weather},\n        daily,\n        hourly,\n        timezone,\n        timezone_offset\n    } = data;\n\n    daily = daily.slice(1, 7).map((d) => {\n        return {\n            date: getTime(timeToLocal(d.dt, timezone_offset)),\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    hourly = hourly.slice(0, 47).map((h) => {\n        return {\n            date: getTime(timeToLocal(h.dt, timezone_offset)),\n            temp: h.temp,\n            icon: h.weather[0].icon,\n        };\n    });\n\n    const { icon, description } = weather[0];\n\n    return ({\n        current: {\n            lat,\n            lon,\n            temp,\n            city: timezone.split('/')[1],\n            dt,\n            icon,\n            description,\n            date: getTime(timeToLocal(dt, timezone_offset))\n        },\n        daily,\n        hourly\n\n    });\n}\n\nfunction formatCurrentWeather(data) {\n    const {\n        coord: { lat, lon }\n    } = data;\n\n    return {\n        lat,\n        lon,\n    };\n}\n\nexport async function getDataCurrentWeather(searchParams) {\n    const formattedCurrentWeather = await getWeather(\n        'weather',\n        searchParams\n    ).then(formatCurrentWeather);\n\n    const {lat, lon} = formattedCurrentWeather;\n\n    let forecastWeather = getFormattedDataWeather({lat, lon, units: 'metric'});\n\n    return forecastWeather;\n}\nexport async function getFormattedDataWeather(searchParams) {\n\n    const formattedForecastWeather = await getWeather(\n        'onecall',\n        searchParams\n    ).then(formatForecastWeather);\n\n    return formattedForecastWeather\n}\n\nexport function timeToLocal(sec, timezone) {\n    return (new Date(sec*1000+(timezone*1000)).toUTCString())\n}\n\nfunction getTime(date) {\n    const localeDate = new Date(date);\n    const  dayLong = localeDate.toLocaleDateString(\"en-GB\", {\n        weekday: 'long'\n    });\n    const  dayShort = localeDate.toLocaleDateString(\"en-GB\", {\n        weekday: 'short'\n    });\n\n    let time = localeDate.toLocaleTimeString('en-GB');\n    time = time.split(':').splice(0, 2).join(':');\n\n    return ({\n        dayLong,\n        dayShort,\n        time,\n        date: localeDate.toLocaleDateString(\"en-GB\")\n    })\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}