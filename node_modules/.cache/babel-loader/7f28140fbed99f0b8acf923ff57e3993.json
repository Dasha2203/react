{"ast":null,"code":"var _jsxFileName = \"/Users/darakorbut/Downloads/projects/weatherapp/src/Pages/Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './Main.module.scss';\nimport { Snow } from \"../assets/icons\";\nimport DayWeather from \"../components/DayWeather/DayWeather\";\nimport Button from \"../components/Button/Button\";\nimport { CITIES } from \"../const/const\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [town, setTown] = useState(CITIES[0]);\n  const [temp, setTemp] = useState(0);\n  const [description, setDescription] = useState('');\n  const [lat, setLat] = useState();\n  const [lng, setLng] = useState();\n  function timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = a.getHours();\n    var min = a.getMinutes();\n    var sec = a.getSeconds();\n    var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n  }\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n      });\n    }\n  }\n  function currentTime(timezoneIn, dtIn) {\n    let dateTime = new Date(dtIn * 1000 + timezoneIn * 1000);\n\n    // Convert into 24-hour format\n    let hour = dateTime.getHours() % 12 - 3;\n    let ampm = hour >= 12 ? 'pm' : 'am';\n    let minutes = dateTime.getMinutes();\n    let weekday = dateTime.toLocaleString('default', {\n      weekday: 'long'\n    });\n    let month = dateTime.toLocaleString('default', {\n      month: 'short'\n    });\n    let date = dateTime.getDate();\n    return `${hour} : ${minutes} ${ampm} - ${weekday} , ${month} ${date}`;\n  }\n  async function fetchWeather() {\n    let res = await fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${town.lat}&lon=${town.lon}&units=metric&cnt=4&appid=c065f555d4e19864fdc27e420f758663`);\n    let w = await res.json();\n    const {\n      list\n    } = w;\n    const today = list[0];\n    setTemp(Math.round(today.main.temp));\n    setDescription(today.weather[0].description);\n    let zone = w.city.timezone;\n    let time = currentTime(zone, today.dt);\n    console.log('time = ', new Date(today.dt * 1000));\n    console.log('res', w);\n  }\n  useEffect(() => {\n    // if (navigator.geolocation) {\n    //     // Передаем две функции\n    //     navigator.geolocation.getCurrentPosition((position) => {\n    //         setLat(position.coords.longitude);\n    //         setLng(position.coords.longitude);\n    //     }, geolocationFailure);\n    //\n    //     // Выводим результат\n    //     result.innerHTML = \"Поиск начался\";\n    // }\n    // else {\n    //     // Выводим результат\n    //     result.innerHTML = \"Ваш браузер не поддерживает геолокацию\";\n    // }\n  }, []);\n  useEffect(() => {\n    fetchWeather();\n    window.onload = function () {\n      getLocation();\n    };\n  }, [town]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'h-screen flex',\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'container px-4 mx-auto pt-5',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'flex gap-4',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setTown(CITIES[0]),\n          children: \"Minsk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setTown(CITIES[1]),\n          children: \"Moscow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setTown(CITIES[2]),\n          children: \"Bratislava\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.block,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.city,\n          children: \"MINSK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.info,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Monday\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"02/03/2001\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.image,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Snow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.degree,\n          children: [temp, \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.block,\n        children: [/*#__PURE__*/_jsxDEV(DayWeather, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DayWeather, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DayWeather, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"0wf4Al/40kOWQ34AeiEGSJLYvBE=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","styles","Snow","DayWeather","Button","CITIES","Main","town","setTown","temp","setTemp","description","setDescription","lat","setLat","lng","setLng","timeConverter","UNIX_timestamp","a","Date","months","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","time","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","currentTime","timezoneIn","dtIn","dateTime","ampm","minutes","weekday","toLocaleString","fetchWeather","res","fetch","lon","w","json","list","today","Math","round","main","weather","zone","city","timezone","dt","console","log","window","onload","block","info","image","degree"],"sources":["/Users/darakorbut/Downloads/projects/weatherapp/src/Pages/Main.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport styles from './Main.module.scss';\nimport {Snow} from \"../assets/icons\";\nimport DayWeather from \"../components/DayWeather/DayWeather\";\nimport Button from \"../components/Button/Button\";\nimport {CITIES} from \"../const/const\";\n\nconst Main = () => {\n    const [town, setTown] = useState(CITIES[0]);\n    const [temp, setTemp] = useState(0);\n    const [description, setDescription] = useState('');\n\n    const [lat, setLat] = useState();\n    const [lng, setLng] = useState();\n\n    function timeConverter(UNIX_timestamp){\n        var a = new Date(UNIX_timestamp * 1000);\n        var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n        var year = a.getFullYear();\n        var month = months[a.getMonth()];\n        var date = a.getDate();\n        var hour = a.getHours();\n        var min = a.getMinutes();\n        var sec = a.getSeconds();\n        var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n        return time;\n    }\n\n    function getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                setLat(position.coords.latitude)\n                setLng(position.coords.longitude);\n            })\n        }\n    }\n\n    function currentTime(timezoneIn, dtIn) {\n        let dateTime = new Date(dtIn * 1000 + (timezoneIn * 1000));\n\n        // Convert into 24-hour format\n        let hour = (dateTime.getHours() % 12) - 3;\n        let ampm = hour >= 12 ? 'pm' : 'am';\n\n        let minutes = dateTime.getMinutes();\n        let weekday = dateTime.toLocaleString('default', { weekday: 'long' });\n        let month = dateTime.toLocaleString('default', { month: 'short' });\n        let date = dateTime.getDate();\n\n        return `${hour} : ${minutes} ${ampm} - ${weekday} , ${month} ${date}`;\n    }\n\n    async function fetchWeather() {\n\n\n        let res = await fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${town.lat}&lon=${town.lon}&units=metric&cnt=4&appid=c065f555d4e19864fdc27e420f758663`);\n        let w = await res.json();\n        const {list} = w;\n        const today = list[0];\n        setTemp(Math.round(today.main.temp));\n        setDescription(today.weather[0].description);\n        let zone = w.city.timezone;\n        let time = currentTime(zone,today.dt)\n        console.log('time = ', new Date(today.dt*1000))\n        console.log('res', w)\n\n    }\n\n    useEffect(() => {\n        // if (navigator.geolocation) {\n        //     // Передаем две функции\n        //     navigator.geolocation.getCurrentPosition((position) => {\n        //         setLat(position.coords.longitude);\n        //         setLng(position.coords.longitude);\n        //     }, geolocationFailure);\n        //\n        //     // Выводим результат\n        //     result.innerHTML = \"Поиск начался\";\n        // }\n        // else {\n        //     // Выводим результат\n        //     result.innerHTML = \"Ваш браузер не поддерживает геолокацию\";\n        // }\n    }, [])\n\n    useEffect(()=> {\n        fetchWeather();\n        window.onload = function() {\n            getLocation();\n        }\n    },[town])\n\n    return (\n        <div className={'h-screen flex'}>\n            <div className={'container px-4 mx-auto pt-5'}>\n                <div className={'flex gap-4'}>\n                    <Button onClick={()=>setTown(CITIES[0])}>\n                        Minsk\n                    </Button>\n                    <Button onClick={()=>setTown(CITIES[1])}>\n                        Moscow\n                    </Button>\n                    <Button onClick={()=>setTown(CITIES[2])}>\n                        Bratislava\n                    </Button>\n                </div>\n                <div className={styles.block}>\n                    <div className={styles.city}>\n                        MINSK\n                    </div>\n                    <div className={styles.info}>\n                        <p>Monday</p>\n                        <p>02/03/2001</p>\n                    </div>\n                    <div className={styles.image}>\n                        <div>\n                            <Snow/>\n                        </div>\n                        <p>{description}</p>\n                    </div>\n                    <div className={styles.degree}>\n                        {temp}°\n                    </div>\n                </div>\n                <div className={styles.block}>\n                    <DayWeather/>\n                    <DayWeather/>\n                    <DayWeather/>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module"}