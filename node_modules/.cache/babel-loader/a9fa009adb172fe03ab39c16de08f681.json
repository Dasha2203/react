{"ast":null,"code":"var _jsxFileName = \"/Users/darakorbut/Downloads/projects/weatherapp/src/Pages/Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './Main.module.scss';\nimport { Snow } from \"../assets/icons\";\nimport DayWeather from \"../components/DayWeather/DayWeather\";\nimport Button from \"../components/Button/Button\";\nimport { CITIES } from \"../const/const\";\nimport { getFormattedDataWeather, getWeather } from \"../weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst Main = () => {\n  _s();\n  const [town, setTown] = useState(CITIES[0]);\n  const [timeZone, setTimeZone] = useState(0);\n  const [temp, setTemp] = useState(0);\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState('');\n  const [day, setDay] = useState(0);\n  const [daysWeather, setDaysWeather] = useState([]);\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        // setLat(position.coords.latitude)\n        // setLng(position.coords.longitude);\n      });\n    }\n  }\n  function getTime(timezone, dt) {\n    let date = new Date(dt * 1000 - timezone * 1000);\n    let day = date.getDay();\n    return {\n      day: days[day],\n      date: date.toLocaleDateString(\"en-US\")\n    };\n  }\n  async function fetchWeather() {\n    let res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${town.lat}&lon=${town.lon}&cnt=4&exclude=current,minutely,hourly,alerts&units=metric&appid=c065f555d4e19864fdc27e420f758663`);\n    let w = await res.json();\n    const {\n      daily\n    } = w;\n    const today = daily[0];\n    // setTemp(Math.round(today.main.temp));\n    // setDescription(today.weather[0].description);\n    // let zone = w.city.timezone;\n    // let date = new Date(today.dt*1000-(zone*1000))\n    // let day = date.getDay();\n    // setDate(date.toLocaleDateString(\"en-US\"))\n    // setDay(days[day]);\n    // setDaysWeather(list.filter((_, i) => i !== 0));\n    // console.log('time = ',date.getDay())\n    console.log('res', w);\n  }\n  useEffect(() => {\n    // if (navigator.geolocation) {\n    //     // Передаем две функции\n    //     navigator.geolocation.getCurrentPosition((position) => {\n    //         setLat(position.coords.longitude);\n    //         setLng(position.coords.longitude);\n    //     }, geolocationFailure);\n    //\n    //     // Выводим результат\n    //     result.innerHTML = \"Поиск начался\";\n    // }\n    // else {\n    //     // Выводим результат\n    //     result.innerHTML = \"Ваш браузер не поддерживает геолокацию\";\n    // }\n  }, []);\n  useEffect(() => {\n    let res = getFormattedDataWeather({\n      q: 'Minsk'\n    });\n    // fetchWeather();\n\n    console.log('useeffcet', res);\n    window.onload = function () {\n      getLocation();\n    };\n  }, [town]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'h-screen flex',\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'container px-4 mx-auto pt-5',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'flex gap-4',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setTown(CITIES[0]),\n          children: \"Minsk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setTown(CITIES[1]),\n          children: \"Moscow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setTown(CITIES[2]),\n          children: \"Bratislava\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.block,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.city,\n          children: \"MINSK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.info,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.image,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Snow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.degree,\n          children: [temp, \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.block,\n        children: daysWeather.map((item, i) => /*#__PURE__*/_jsxDEV(DayWeather, {\n          day: getTime(timeZone, item.dt).day\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"4JzRt+nY61OsAaJFMxb1Adk8kvM=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","styles","Snow","DayWeather","Button","CITIES","getFormattedDataWeather","getWeather","month","days","Main","town","setTown","timeZone","setTimeZone","temp","setTemp","description","setDescription","date","setDate","day","setDay","daysWeather","setDaysWeather","getLocation","navigator","geolocation","getCurrentPosition","position","getTime","timezone","dt","Date","getDay","toLocaleDateString","fetchWeather","res","fetch","lat","lon","w","json","daily","today","console","log","q","window","onload","block","city","info","image","degree","map","item","i"],"sources":["/Users/darakorbut/Downloads/projects/weatherapp/src/Pages/Main.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport styles from './Main.module.scss';\nimport {Snow} from \"../assets/icons\";\nimport DayWeather from \"../components/DayWeather/DayWeather\";\nimport Button from \"../components/Button/Button\";\nimport {CITIES} from \"../const/const\";\nimport {getFormattedDataWeather, getWeather} from \"../weather\";\nconst month= [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n    \"August\",\"September\",\"October\",\"November\",\"December\"];\nvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nconst Main = () => {\n    const [town, setTown] = useState(CITIES[0]);\n    const [timeZone, setTimeZone] = useState(0);\n    const [temp, setTemp] = useState(0);\n    const [description, setDescription] = useState('');\n    const [date, setDate] = useState('')\n    const [day, setDay] = useState(0);\n    const [daysWeather, setDaysWeather] = useState([]);\n\n\n    function getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                // setLat(position.coords.latitude)\n                // setLng(position.coords.longitude);\n            })\n        }\n    }\n\n    function getTime(timezone, dt) {\n        let date = new Date(dt*1000-timezone*1000);\n        let day = date.getDay();\n\n        return {\n            day: days[day],\n            date: date.toLocaleDateString(\"en-US\")\n        }\n    }\n\n    async function fetchWeather() {\n        let res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${town.lat}&lon=${town.lon}&cnt=4&exclude=current,minutely,hourly,alerts&units=metric&appid=c065f555d4e19864fdc27e420f758663`);\n        let w = await res.json();\n        const {daily} = w;\n        const today = daily[0];\n        // setTemp(Math.round(today.main.temp));\n        // setDescription(today.weather[0].description);\n        // let zone = w.city.timezone;\n        // let date = new Date(today.dt*1000-(zone*1000))\n        // let day = date.getDay();\n        // setDate(date.toLocaleDateString(\"en-US\"))\n        // setDay(days[day]);\n        // setDaysWeather(list.filter((_, i) => i !== 0));\n        // console.log('time = ',date.getDay())\n        console.log('res', w)\n    }\n\n    useEffect(() => {\n        // if (navigator.geolocation) {\n        //     // Передаем две функции\n        //     navigator.geolocation.getCurrentPosition((position) => {\n        //         setLat(position.coords.longitude);\n        //         setLng(position.coords.longitude);\n        //     }, geolocationFailure);\n        //\n        //     // Выводим результат\n        //     result.innerHTML = \"Поиск начался\";\n        // }\n        // else {\n        //     // Выводим результат\n        //     result.innerHTML = \"Ваш браузер не поддерживает геолокацию\";\n        // }\n    }, [])\n\n    useEffect(()=> {\n        let res = getFormattedDataWeather({q:'Minsk'});\n        // fetchWeather();\n\n        console.log('useeffcet', res)\n        window.onload = function() {\n            getLocation();\n        }\n    },[town])\n\n    return (\n        <div className={'h-screen flex'}>\n            <div className={'container px-4 mx-auto pt-5'}>\n                <div className={'flex gap-4'}>\n                    <Button onClick={()=>setTown(CITIES[0])}>\n                        Minsk\n                    </Button>\n                    <Button onClick={()=>setTown(CITIES[1])}>\n                        Moscow\n                    </Button>\n                    <Button onClick={()=>setTown(CITIES[2])}>\n                        Bratislava\n                    </Button>\n                </div>\n                <div className={styles.block}>\n\n                    <div className={styles.city}>\n                        MINSK\n                    </div>\n                    <div className={styles.info}>\n                        <p>{day}</p>\n                        <p>{date}</p>\n                    </div>\n                    <div className={styles.image}>\n                        <div>\n                            <Snow/>\n                        </div>\n                        <p>{description}</p>\n                    </div>\n                    <div className={styles.degree}>\n                        {temp}°\n                    </div>\n                </div>\n                <div className={styles.block}>\n                    {\n                        daysWeather.map((item, i) => (\n                            <DayWeather day={getTime(timeZone, item.dt).day} key={i}/>\n                        ))\n                    }\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module"}