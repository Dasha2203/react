{"ast":null,"code":"var _jsxFileName = \"/Users/darakorbut/Downloads/projects/weatherapp/src/context/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getDataCurrentWeather, getFormattedDataWeather } from \"../weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  dailyWeather: null,\n  hourlyWeather: null,\n  weather: null\n};\nexport const Context = /*#__PURE__*/React.createContext(initialState);\nexport const ContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [weather, setWeather] = useState(null);\n  const [dailyWeather, setDailyWeather] = useState(null);\n  const [hourlyWeather, setHourlyWeather] = useState(null);\n  async function fetchWeather(_ref2) {\n    let {\n      lat,\n      lon,\n      q\n    } = _ref2;\n    let res = null;\n    if (q) {\n      res = await getFormattedDataWeather({\n        q,\n        units: \"metric\"\n      });\n    } else {\n      res = await getFormattedDataWeather({\n        lat,\n        lon,\n        units: \"metric\",\n        exclude: 'minutely'\n      });\n    }\n    setWeather(res.current);\n    setDailyWeather(res.daily.slice(0, 3));\n    console.log('dasha', res);\n    setHourlyWeather(res.hourly);\n  }\n  async function fetchCurrentWeather(_ref3) {\n    let {\n      q\n    } = _ref3;\n    let res = await getDataCurrentWeather({\n      q,\n      units: \"metric\"\n    });\n    setWeather(res.current);\n    setDailyWeather(res.daily.slice(0, 3));\n    console.log('dasha', res);\n    setHourlyWeather(res.hourly);\n  }\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      weather,\n      setWeather,\n      dailyWeather,\n      setDailyWeather,\n      hourlyWeather,\n      setHourlyWeather,\n      fetchWeather,\n      fetchCurrentWeather\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"BDnMGFpjBXgOh3yOo49YzwMqQnY=\");\n_c = ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","useState","getDataCurrentWeather","getFormattedDataWeather","initialState","dailyWeather","hourlyWeather","weather","Context","createContext","ContextProvider","children","setWeather","setDailyWeather","setHourlyWeather","fetchWeather","lat","lon","q","res","units","exclude","current","daily","slice","console","log","hourly","fetchCurrentWeather"],"sources":["/Users/darakorbut/Downloads/projects/weatherapp/src/context/index.jsx"],"sourcesContent":["import React, {useState} from 'react';\nimport {getDataCurrentWeather, getFormattedDataWeather} from \"../weather\";\n\nconst initialState = {\n    dailyWeather: null,\n    hourlyWeather: null,\n    weather: null\n}\n\nexport const Context = React.createContext(initialState);\n\nexport const ContextProvider = ({children}) => {\n    const [weather, setWeather] = useState(null);\n    const [dailyWeather, setDailyWeather] = useState(null);\n    const [hourlyWeather, setHourlyWeather] = useState(null);\n\n    async function fetchWeather({lat, lon, q}) {\n        let res = null;\n\n        if (q) {\n            res = await getFormattedDataWeather({q, units: \"metric\"});\n        } else {\n            res = await getFormattedDataWeather({lat, lon, units: \"metric\", exclude: 'minutely'});\n        }\n\n        setWeather(res.current);\n        setDailyWeather(res.daily.slice(0,3));\n        console.log('dasha' ,res)\n        setHourlyWeather(res.hourly);\n    }\n\n    async function fetchCurrentWeather({q}) {\n        let res = await getDataCurrentWeather({q, units: \"metric\"});\n        setWeather(res.current);\n        setDailyWeather(res.daily.slice(0,3));\n        console.log('dasha' ,res)\n        setHourlyWeather(res.hourly);\n    }\n\n    return (\n        <Context.Provider value={{\n            weather,\n            setWeather,\n            dailyWeather,\n            setDailyWeather,\n            hourlyWeather,\n            setHourlyWeather,\n            fetchWeather,\n            fetchCurrentWeather\n        }}>\n            {children}\n        </Context.Provider>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAAQC,qBAAqB,EAAEC,uBAAuB,QAAO,YAAY;AAAC;AAE1E,MAAMC,YAAY,GAAG;EACjBC,YAAY,EAAE,IAAI;EAClBC,aAAa,EAAE,IAAI;EACnBC,OAAO,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,OAAO,gBAAGR,KAAK,CAACS,aAAa,CAACL,YAAY,CAAC;AAExD,OAAO,MAAMM,eAAe,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EACtC,MAAM,CAACJ,OAAO,EAAEK,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACI,YAAY,EAAEQ,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACK,aAAa,EAAEQ,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExD,eAAec,YAAY,QAAgB;IAAA,IAAf;MAACC,GAAG;MAAEC,GAAG;MAAEC;IAAC,CAAC;IACrC,IAAIC,GAAG,GAAG,IAAI;IAEd,IAAID,CAAC,EAAE;MACHC,GAAG,GAAG,MAAMhB,uBAAuB,CAAC;QAACe,CAAC;QAAEE,KAAK,EAAE;MAAQ,CAAC,CAAC;IAC7D,CAAC,MAAM;MACHD,GAAG,GAAG,MAAMhB,uBAAuB,CAAC;QAACa,GAAG;QAAEC,GAAG;QAAEG,KAAK,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAU,CAAC,CAAC;IACzF;IAEAT,UAAU,CAACO,GAAG,CAACG,OAAO,CAAC;IACvBT,eAAe,CAACM,GAAG,CAACI,KAAK,CAACC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEP,GAAG,CAAC;IACzBL,gBAAgB,CAACK,GAAG,CAACQ,MAAM,CAAC;EAChC;EAEA,eAAeC,mBAAmB,QAAM;IAAA,IAAL;MAACV;IAAC,CAAC;IAClC,IAAIC,GAAG,GAAG,MAAMjB,qBAAqB,CAAC;MAACgB,CAAC;MAAEE,KAAK,EAAE;IAAQ,CAAC,CAAC;IAC3DR,UAAU,CAACO,GAAG,CAACG,OAAO,CAAC;IACvBT,eAAe,CAACM,GAAG,CAACI,KAAK,CAACC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEP,GAAG,CAAC;IACzBL,gBAAgB,CAACK,GAAG,CAACQ,MAAM,CAAC;EAChC;EAEA,oBACI,QAAC,OAAO,CAAC,QAAQ;IAAC,KAAK,EAAE;MACrBpB,OAAO;MACPK,UAAU;MACVP,YAAY;MACZQ,eAAe;MACfP,aAAa;MACbQ,gBAAgB;MAChBC,YAAY;MACZa;IACJ,CAAE;IAAA,UACGjB;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAA,GA1CYD,eAAe;AAAA,KAAfA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}